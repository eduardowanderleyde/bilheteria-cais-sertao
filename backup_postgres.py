#!/usr/bin/env python3
"""
Script de backup para PostgreSQL
Uso: python backup_postgres.py
"""
import os
import subprocess
import datetime
from pathlib import Path

def create_backup():
    """Cria backup do banco PostgreSQL"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå Vari√°vel DATABASE_URL n√£o configurada")
        return False
    
    # Gera nome do arquivo de backup
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"backup_bilheteria_{timestamp}.sql"
    
    try:
        print(f"üì¶ Criando backup: {backup_file}")
        
        # Executa pg_dump
        cmd = ["pg_dump", database_url, "-f", backup_file]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Backup criado: {backup_file}")
            
            # Mostra tamanho do arquivo
            file_size = Path(backup_file).stat().st_size
            print(f"üìä Tamanho: {file_size / 1024:.1f} KB")
            
            return True
        else:
            print(f"‚ùå Erro no backup: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå pg_dump n√£o encontrado. Instale PostgreSQL client tools.")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def restore_backup(backup_file):
    """Restaura backup do banco PostgreSQL"""
    database_url = os.getenv("DATABASE_URL")
    if not database_url:
        print("‚ùå Vari√°vel DATABASE_URL n√£o configurada")
        return False
    
    if not Path(backup_file).exists():
        print(f"‚ùå Arquivo de backup n√£o encontrado: {backup_file}")
        return False
    
    try:
        print(f"üîÑ Restaurando backup: {backup_file}")
        
        # Executa psql
        cmd = ["psql", database_url, "-f", backup_file]
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Backup restaurado com sucesso")
            return True
        else:
            print(f"‚ùå Erro na restaura√ß√£o: {result.stderr}")
            return False
            
    except FileNotFoundError:
        print("‚ùå psql n√£o encontrado. Instale PostgreSQL client tools.")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def list_backups():
    """Lista arquivos de backup dispon√≠veis"""
    backup_files = list(Path(".").glob("backup_bilheteria_*.sql"))
    
    if not backup_files:
        print("üì≠ Nenhum backup encontrado")
        return
    
    print("üìã Backups dispon√≠veis:")
    for backup_file in sorted(backup_files, reverse=True):
        file_size = backup_file.stat().st_size
        mod_time = datetime.datetime.fromtimestamp(backup_file.stat().st_mtime)
        print(f"  {backup_file.name} ({file_size / 1024:.1f} KB) - {mod_time.strftime('%Y-%m-%d %H:%M')}")

def main():
    """Fun√ß√£o principal"""
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "create":
            create_backup()
        elif command == "restore":
            if len(sys.argv) > 2:
                restore_backup(sys.argv[2])
            else:
                print("‚ùå Especifique o arquivo de backup: python backup_postgres.py restore backup_file.sql")
        elif command == "list":
            list_backups()
        else:
            print("‚ùå Comando inv√°lido. Use: create, restore, ou list")
    else:
        print("üóÑÔ∏è Script de backup PostgreSQL")
        print("\nComandos dispon√≠veis:")
        print("  python backup_postgres.py create    - Criar backup")
        print("  python backup_postgres.py list      - Listar backups")
        print("  python backup_postgres.py restore   - Restaurar backup")
        print("\nExemplo:")
        print("  python backup_postgres.py restore backup_bilheteria_20241203_143022.sql")

if __name__ == "__main__":
    main()
